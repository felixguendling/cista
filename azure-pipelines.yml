jobs:
- template: azure-win-build.yml
  parameters:
   name: VS2019
   vmImage: windows-2019
   cmakeArgs: '-G "Visual Studio 16 2019" -A x64 ..'

- template: azure-win-build.yml
  parameters:
   name: VS2017
   vmImage: vs2017-win2016
   cmakeArgs: '-G "Visual Studio 15 2017" -A x64 ..'

- job: LINUX_CLANG
  strategy:
    matrix:
      REL:
        BUILD_TYPE: Release
        CXXFLAGS: '-stdlib=libc++ -D_LIBCPP_VERSION=1 -march=native'
        FUZZ: False
      DBG:
        BUILD_TYPE: Debug
        CXXFLAGS: '-stdlib=libc++ -D_LIBCPP_VERSION=1 -fno-omit-frame-pointer -fsanitize=address'
        FUZZ: False
      FUZZ:
        BUILD_TYPE: Debug
        CXXFLAGS: '-stdlib=libc++ -D_LIBCPP_VERSION=1 -fno-omit-frame-pointer'
        FUZZ: True
  pool:
    vmImage: ubuntu-16.04
  variables:
    CXX: /opt/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04/bin/clang++
    LD_LIBRARY_PATH: /opt/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04/lib
    ASAN_SYMBOLIZER_PATH: /opt/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04/bin/llvm-symbolizer
  steps:
  - script: |
      sudo curl -Ls http://releases.llvm.org/8.0.0/clang%2bllvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -o clang.tar.xz
      sudo tar -xf clang.tar.xz -C /opt
  - script: |
      mkdir build
      cd build
      cmake -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) ..
    displayName: 'CMake'
  - script: make cista-test
    workingDirectory: build
    displayName: 'Build'
    condition: not(eq(variables['FUZZ'], 'True'))
  - script: make cista-fuzz
    workingDirectory: build
    displayName: 'Build & Execute Fuzzing'
    condition: eq(variables['FUZZ'], 'True')
  - script: ./cista-test
    workingDirectory: build
    displayName: 'Run Tests'
    condition: not(eq(variables['FUZZ'], 'True'))

- job: LINUX_GCC
  strategy:
    matrix:
      REL:
        BUILD_TYPE: Release
        CXXFLAGS: '-march=native'
      DBG:
        BUILD_TYPE: Debug
        CXXFLAGS: '-D_LIBCPP_VERSION=1 -fno-omit-frame-pointer -fsanitize=address'
  pool:
    vmImage: ubuntu-16.04
  variables:
    CXX: g++-8
  steps:
  - script: |
      sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      sudo apt update
      sudo apt install -y --no-install-recommends g++-8
  - script: |
      mkdir build
      cd build
      cmake -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) ..
    displayName: 'CMake'
  - script: make cista-test
    workingDirectory: build
    displayName: 'Build'
  - script: ./cista-test
    workingDirectory: build
    displayName: 'Run Tests'

- job: POWERPC
  pool:
    vmImage: ubuntu-16.04
  variables:
    ROOT_DIR: /ppc-root
  steps:
  - script: |
      docker run \
        -v "$PWD:/repo" \
        -e "CXXFLAGS=-static" \
        --rm \
        felixguendling/cross-build-cpp \
        bash -c "cmake-ppc /repo && ninja cista-test && qemu-ppc-static cista-test"
    displayName: 'Build & Run Tests'
